% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/parameter.R
\name{prm_no_var}
\alias{prm_no_var}
\alias{prm_normal}
\alias{prm_log_normal}
\alias{prm_logit_normal}
\alias{parameter-model}
\title{Parameter model}
\usage{
prm_no_var(name)

prm_normal(name)

prm_log_normal(name)

prm_logit_normal(name)
}
\arguments{
\item{name}{A name for the parameter}
}
\description{
These building blocks define a parameter model, declaring a parameter and specifying how it varies between subjects.
}
\details{
The parameter building blocks require a name for the parameter by which it can be referenced in a different building
block. The distribution of the parameter in the population is chosen by selecting among the following predefined
 functions:
  * `prm_no_var`: A parameter without variability, i.e., without random effects.
  * `prm_normal`: A parameter following the normal distribution.
  * `prm_log_normal`: A parameter following the log-normal distribution.
  * `prm_logit_normal`: A parameter following the logit-normal distribution (the parameter is normally distributed on the logit scale).

Adding a parameter with an already existing name will replace the definition of the parameter. For example, the parameter "base"
will have a log-normal distribution in the following snippet:
```
m <- model() +
  prm_normal("base") +
  prm_log_normal("base")
```

## MU-referencing

`assemblerr` can include mu-referencing statements for parameter distributions that support it. The functionality can be
activated by setting the option `prm.use_mu_referencing` to `TRUE` as shown in the following snippet:
```
m <- model() +
   prm_normal("base") +
   prm_log_normal("slp") +
   obs_additive(response~base+slp*time)

render(
  model = m,
  options = assemblerr_options(prm.use_mu_referencing = TRUE)
)
```
}
\examples{
# a log-normal parameter that is directly observed
m <- model() +
  prm_log_normal("wt") +
  obs_additive(~wt)

# EMAX dose-response model with emax and ed50 parameters
m2 <- model() +
  input_variable("dose") +
  prm_no_var("emax") +
  prm_no_var("ed50") +
  obs_proportional(effect~emax*dose/(ed50+dose))
}
